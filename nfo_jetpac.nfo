*** GENERAL COMMAND LINE OPTIONS ***
* Options begin,end,offset,interleave,bus always define settings for the following file
option dasm 6502            * Select disassembler type
option out jetpac.a65       * Select output filename of dissasembly
option offset 2000          * Select start address of supplied binary
file   jetpac_2000-3fff.bin * Instructs dasmfw to load the given file at the given address

*** OUTPUT FORMATTING OPTIONS ***
*option addr on      * Show address field output for clean assembler source files
*option hex on       * Show hex dump output
option asc off       * Show output of the ASCII equivalent to code/data
*option cref on      * Show cross-referece table
*option unused on    * Show unused labels
option labellen 12   * Reserve space in this length for code labels. By default, dasmfw reserves 8 places for labels
option eqlbllen 18   * Reserve space in this length for EQU labels. By default, dasmfw reserves 8 places for labels
option copndlen 18   * Reserve space in this length for the operand part of a disassembled instruction with a line comment
*option copndlen 10  * Reserve space in this length for the operand part of a disassembled instruction with a line comment

*** DISASSEMBLER OPTIONS ***
*option pbase 16     * Default parsing base, default is 16
*option defdisp hex  * Default display base, default is hex
*option cchar //     * Set end of line comment character
*option cchar ;      * Set end of line comment character
option upmnemo off   * Upper case mnemonics in output file

*** DISASSEMBLER SPECIFIC OPTIONS ***
*option conv on       * Convenience mnemonics
*option forceaddr off * To handle forced direct / extended addressing

******************************************************************************
*If you think about it, there are various kinds of mutually exclusive options
*for a memory cell. These are:
*type (unused / code / data / rmb)
*size (default char / word; dasmfw also has dword for processors that support 4-byte entities)
*formatting (bin / char / dec / hex)
*semantics (const)
******************************************************************************

******************************************************************************
* If an address is used in an instruction that clearly indicates it's referencing
* data (LDA, as a simple example) and there's no label in place for that address,
* it uses a "M" prefix for generated labels; if the referenced address is clearly
* code (JMP, for example), it uses a "Z" prefix.
******************************************************************************

*** INFO FILE INSTRUCTIONS ***
include nfo_memory_map.nfo        * Include VIC-20 memory map info
include nfo_separators.nfo        * Include JMP/JSR separator lines
include nfo_code_data.nfo         * Undefend Labels

*insert \ SETLI 128               * a09 Assembler. Sets the line length for listings; nnn is the number of columns that can be printed in a line (40-2000).
*insert \ processor 6502          * For DASM Assembler? Can't remember...

insert ; ----------------------------------------------------------
insert ;  This is the reverse-engineered source code for the
insert ;  game 'JETPAC' written by Ultimate Play The Game.
insert ; ----------------------------------------------------------

; Workaround for dasmfw incorrectly disassembling 'jmp ($addr)'
hex       2617-2619
const     2617-2619
lcomment  2617 jmp ($005f)

hex       26e1-26e3
const     26e1-26e3
lcomment  26e1 jmp ($0008)

hex       2885-2887
const     2885-2887
lcomment  2885 jmp ($0008)

; Workaround for as65 interpreting a '\' as escaping the next charecter
const 3457
const 3516

; Zero-Page variables
label    0004 ZP_Addr_To
label    0005 ZP_Addr_To+1
label    0006 ZP_Addr_From
label    0007 ZP_Addr_From+1
label      51 Score_P1 ; 3 bytes (Hi Score is stored where?)
label      54 Score_P2 ; 3 bytes
label      5a Num_Lives
label    1fd0 UDG_END

; Start of disassembly instructions
const    2000-201b
break    2019-2020
label    2004 VIC_Init_Tab
lcomment 2004 Initial value table for VIC setup 16 bytes
lcomment 201c NMI Interrupt Vector points here

comment  201d
comment  201d  ----------------------------------------------------------
comment  201d  Starts here
comment  201d  ----------------------------------------------------------

lcomment 201E Reset stack pointer
lcomment 2021 CLear Decimal flag
lcomment 2022 Setup NMI Interrupt Vector
comment  2056
lcomment 2056 Reset the VIC 16 registers
label    2058 Start_1
comment  2061
lcomment 2061
lcomment 2061 Store ascending numbers step #11 at a time into #23 bytes from $200 as below
lcomment 2061 then do it #10 more times, but starting at 1 higher each time
lcomment 2061 THIS BLANKS A SECTION OF THE SCREEN ONE PIXEL LINE AT A TIME
lcomment 2061 0217  01 0C 17 22 2D 38 43 4E 59 64 6F 7A 85 90 9B A6 B1 BC C7 D2 DD E8 F3   ..."-8CNYdoz...¦±¼ÇÒÝèó
lcomment 2061 022E  02 0D 18 23 2E 39 44 4F 5A 65 70 7B 86 91 9C A7 B2 BD C8 D3 DE E9 F4   ...#.9DOZep{...§²½ÈÓÞéô
lcomment 2061 0245  03 0E 19 24 2F 3A 45 50 5B 66 71 7C 87 92 9D A8 B3 BE C9 D4 DF EA F5   ...$/:EP[fq|...¨³¾ÉÔßêõ
lcomment 2061 025C  04 0F 1A 25 30 3B 46 51 5C 67 72 7D 88 93 9E A9 B4 BF CA D5 E0 EB F6   ...%0;FQ\gr}...©´¿ÊÕàëö
lcomment 2061 0273  05 10 1B 26 31 3C 47 52 5D 68 73 7E 89 94 9F AA B5 C0 CB D6 E1 EC F7   ...&1<GR]hs~...ªµÀËÖáì÷
lcomment 2061 028A  06 11 1C 27 32 3D 48 53 5E 69 74 7F 8A 95 A0 AB B6 C1 CC D7 E2 ED F8   ...'2=HS^it... «¶ÁÌ×âíø
lcomment 2061 02A1  07 12 1D 28 33 3E 49 54 5F 6A 75 80 8B 96 A1 AC B7 C2 CD D8 E3 EE F9   ...(3>IT_ju...¡¬·ÂÍØãîù
lcomment 2061 02B8  08 13 1E 29 34 3F 4A 55 60 6B 76 81 8C 97 A2 AD B8 C3 CE D9 E4 EF FA   ...)4?JU`kv...¢-¸ÃÎÙäïú
lcomment 2061 02CF  09 14 1F 2A 35 40 4B 56 61 6C 77 82 8D 98 A3 AE B9 C4 CF DA E5 F0 FB    ..*5@KValw...£®¹ÄÏÚåðû
lcomment 2061 02E6  0A 15 20 2B 36 41 4C 57 62 6D 78 83 8E 99 A4 AF BA C5 D0 DB E6 F1 FC   .. +6ALWbmx...¤¯ºÅÐÛæñü
lcomment 2061 02FD  00 00 00 3A C4 83 C4 7C C5 1A C7 E4 C7 86 CE 00 00 00 00 00 00 00 00   ...:Ä.Ä|Å.ÇäÇ.Î........

label    2064 Start_2
label    2067 Start_3
comment  2071
comment  2079
comment  2079
comment  207C
comment  2085

comment  20E3

lcomment 2416 Blanks half of the screen
lcomment 2419 Blanks Erase 1200-1fff Standard RAM
lcomment 2422 Puts 000000  000000  00 at top of screen

comment  2425

comment  259d
lcomment 259d
lcomment 259d Takes stuff that was stashed on the stack previously and leaves
lcomment 259d as an address in $0040, in this case $355E
code     259d-259f

lcomment 25ca Inc address at $40, inc lo-byte, then hi-byte if lo-byte=0

comment  265e Setup Timer 1
label    265e SET_TMR_1
comment  275b Erase $100 bytes zero page
label    275b ERASEZP
lcomment 275b Erase $100 bytes zero page
label    275e ERASEZ1
comment  276f Erase $30 bytes at end of UDGs $1fd0-$2000
label    276f ERASE_UDG_END
label    2773 ERASE1


lcomment 34CC This is an intermediate jsr, called from several places
lcomment 34CF Doesn't seem to do much
label    34D6 LOOP_34D6
lcomment 34D8 Load A with content of $2450+y?
lcomment 34DB Strange pair of jumps to same place, branch&jsr
lcomment 34Dd Strange pair of jumps to same place, branch&jsr
lcomment 34e3 Run through, don't know what it's doing

comment  34e9
lcomment 34e9 Stash y via a
lcomment 34EB Moves a few bytes around
lcomment 34ef Restore y via a
comment  34f0

comment  351D
lcomment 351D Valid Target - traced but doesn't seem to do much

comment  3579
label    357b LOOP_357b
lcomment 357b
lcomment 357b Fills memory from 9600-96fc (address at zero page $05) with $01's
lcomment 357b This is color RAM for 3.5k but unused for 8k+!?
lcomment 357b ALSO CONTIUNES TO BLANK THE SCREEN, COMPLETING BOTTOM HALF
lcomment 357b FILLS SCREEN WITH A RUG
lcomment 357b FILLS 1200-1fff i.e. stanard RAM
lcomment 357b This may be a generic memory move operation, as it also is used ot fill screen-ram at $1000
lcomment 357b 9600  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 9610  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 9620  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 9630  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 9640  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 9650  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 9660  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 9670  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 9680  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 9690  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 96A0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 96B0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 96C0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 96D0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 96E0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 96F0  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00   ................
lcomment 357b 9700  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................

lcomment 3595 Run through

comment  35A0
lcomment 35A0 Loop a few times only
label    35A2 LOOP_35A2
comment  35Aa

lcomment 35B6 Store about 8 bytes from $0081 to $1000?, all seem to be zeros for now
label    35B6 LOOP_35B6
lcomment 35BD Updates to location for saving character line

label    35CB Invrt_Pix_Lines
lcomment 35CB Load from 81xx, offset with y, which is probably 0-7
lcomment 35cd Intro screen: Invert a line of a character, change to $F0 and only half inverts
lcomment 35CB Save to 13xx

; End of file contains graphics data
binary   385f-3fff