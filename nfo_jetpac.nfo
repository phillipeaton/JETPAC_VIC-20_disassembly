*** GENERAL COMMAND LINE OPTIONS ***
* Options begin,end,offset,interleave,bus always define settings for the following file
option dasm 6502            * Select disassembler type
option out jetpac.a65       * Select output filename of dissasembly
option offset 2000          * Select start address of supplied binary
file   jetpac_2000-3fff.bin * Instructs dasmfw to load the given file at the given address

*** OUTPUT FORMATTING OPTIONS ***
*option addr off     * Show address field output for clean assembler source files
*option hex on       * Show hex dump output
option asc off       * Show output of the ASCII equivalent to code/data
*option cref on      * Show cross-referece table
*option unused on    * Show unused labels
;option labellen 32   * Def=8  Reserve spaces for code labels.
option eqlbllen 24   * Def=8  Reserve spaces for EQU labels.
option copndlen 24   * Def=24 Reserve spaces for operand part of disassembled instruction with line comment
option uopndlen 52   * Def=52 Reserve spaces for operand part of disassembled instruction without line comment
option dbcount 3     * Def=5  Reserve spaces for hex/ascii dump bytes if hex or asc options enabled.

*** DISASSEMBLER OPTIONS ***
*option pbase 16     * Default parsing base, default is 16
option defdisp hex  * Default display base, default is hex
*option cchar //     * Set end of line comment character
*option cchar ;      * Set end of line comment character
option upmnemo off   * Upper case mnemonics in output file

*** DISASSEMBLER SPECIFIC OPTIONS ***
*option conv on       * Convenience mnemonics
*option forceaddr off * To handle forced direct / extended addressing

******************************************************************************
*If you think about it, there are various kinds of mutually exclusive options
*for a memory cell. These are:
*type (unused / code / data / rmb)
*size (default char / word; dasmfw also has dword for processors that support 4-byte entities)
*formatting (bin / char / dec / hex)
*semantics (const)
******************************************************************************

******************************************************************************
* If an address is used in an instruction that clearly indicates it's referencing
* data (LDA, as a simple example) and there's no label in place for that address,
* it uses a "M" prefix for generated labels; if the referenced address is clearly
* code (JMP, for example), it uses a "Z" prefix.
******************************************************************************
*insert \ SETLI 128               * a09 Assembler. Sets the line length for listings; nnn is the number of columns that can be printed in a line (40-2000).
*insert \ processor 6502          * For DASM Assembler? Can't remember...

insert ; ----------------------------------------------------------
insert ;  This is the reverse-engineered source code for the
insert ;  game 'JETPAC' written by Ultimate Play The Game.
insert ; ----------------------------------------------------------

*** INFO FILE INSTRUCTIONS ***
include nfo_memory_map.nfo        * Include VIC-20 memory map info
include nfo_separators.nfo        * Include JMP/JSR separator lines
include nfo_code_data.nfo         * Everything is data, unless it's not
include nfo_variables.nfo         * Zero Page and others with persistency

; Start of disassembly instructions
word     2000-2003
;        2004
break    2004-2013
comment  2004 Initial value table for VIC setup 16 bytes
lcomment 2004 VICCRO Left edge of TV picture and interlace switch.
const    2004-201B
label    2004 VIC_Init_Tab
lcomment 2005 VICCR1
lcomment 2006 VICCR2
lcomment 2007 VICCR3
lcomment 2008 VICCR4
lcomment 2009 VICCR5
lcomment 200A VICCR6
lcomment 200B VICCR7
lcomment 200C VICCR8
lcomment 200D VICCR9
lcomment 200E VICCRA
lcomment 200F VICCRB
lcomment 2010 VICCRC
lcomment 2011 VICCRD
lcomment 2012 VICCRE
lcomment 2013 VICCRF
;        2014
label    2014 MASK_01
label    2015 MASK_02
label    2016 MASK_04
label    2017 MASK_08
label    2018 MASK_10
label    2019 MASK_20
label    201A MASK_40
label    201B MASK_80
comment  201C
comment  201C +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
used     201C NMI_Interrupt_Hardler
;        201D
comment  201D
comment  201D  ----------------------------------------------------------
comment  201D  Starts here
comment  201D  ----------------------------------------------------------
lcomment 201E Reset stack pointer
;        201e
lcomment 2021 Clear Decimal flag
lcomment 2022 Setup NMI Interrupt Vector
comment  2056
lcomment 2056 Reset the VIC 16 registers
label    2058 Start_1
comment  2061
lcomment 2061
lcomment 2061 Store ascending numbers step #11 at a time into #23 bytes from $200 as below
lcomment 2061 then do it #10 more times, but starting at 1 higher each time
lcomment 2061 Note each character is a 16x8 tile i.e. double height
lcomment 2061 0216  00 0B 16 21 2C 37 42 4D 58 63 6E 79 84 8F 9A A5 B0 BB C6 D1 DC E7 F2
lcomment 2061 0217  01 0C 17 22 2D 38 43 4E 59 64 6F 7A 85 90 9B A6 B1 BC C7 D2 DD E8 F3
lcomment 2061 022E  02 0D 18 23 2E 39 44 4F 5A 65 70 7B 86 91 9C A7 B2 BD C8 D3 DE E9 F4
lcomment 2061 0245  03 0E 19 24 2F 3A 45 50 5B 66 71 7C 87 92 9D A8 B3 BE C9 D4 DF EA F5
lcomment 2061 025C  04 0F 1A 25 30 3B 46 51 5C 67 72 7D 88 93 9E A9 B4 BF CA D5 E0 EB F6
lcomment 2061 0273  05 10 1B 26 31 3C 47 52 5D 68 73 7E 89 94 9F AA B5 C0 CB D6 E1 EC F7
lcomment 2061 028A  06 11 1C 27 32 3D 48 53 5E 69 74 7F 8A 95 A0 AB B6 C1 CC D7 E2 ED F8
lcomment 2061 02A1  07 12 1D 28 33 3E 49 54 5F 6A 75 80 8B 96 A1 AC B7 C2 CD D8 E3 EE F9
lcomment 2061 02B8  08 13 1E 29 34 3F 4A 55 60 6B 76 81 8C 97 A2 AD B8 C3 CE D9 E4 EF FA
lcomment 2061 02CF  09 14 1F 2A 35 40 4B 56 61 6C 77 82 8D 98 A3 AE B9 C4 CF DA E5 F0 FB
lcomment 2061 02E6  0A 15 20 2B 36 41 4C 57 62 6D 78 83 8E 99 A4 AF BA C5 D0 DB E6 F1 FC
;        2064
label    2064 Start_2
label    2067 Start_3
comment  2071
comment  2079
label    2079 Start_Rst_Game_Sel_Flash
comment  207C
;        2080
label    2080 BACK_2080
comment  2085
comment  208F
label    208F Game_Select
;        2093
lcomment 2093 Set Port B all bits to input
lcomment 2098 Set Port A all bits to output
lcomment 209D Select keyboard column to read (F7/F5/F3/F1/CDown/CRight/Rtn/Del)
lcomment 20A0 Get game settings ($1fD3 = Just outside UDG RAM)
lcomment 20A3 Read keyboard column
lcomment 20A6 Store keyboard data
lcomment 20AA F1 pressed? (1 Player)
lcomment 20AC No, skip
label    20B2 SKIP_20B2
lcomment 20B4 F3 pressed? (2 Player)
lcomment 20B6 No, skip
label    20BC SKIP_20BC
lcomment 20BE F5 pressed? (Keyboard)
lcomment 20C0 No, skip
label    20C6 SKIP_20C6
lcomment 20C8 F7 pressed? (Joystick)
lcomment 20CA No, skip
label    20D0 SKIP_20D0
lcomment 20D1 Store game settings ($1fD3 = Just outside UDG RAM)
lcomment 20D1 0=1P+Kbd, 1=2P+Kbd, 2=1P+Jsk, 3=2P+Jsk
lcomment 20D9 Select keyboard column to read (2/Q/CBM/Space/Stop/Ctrl/Left/1)
lcomment 20DF Space Pressed?
lcomment 20E1 No, read keyboard again
;        20E3
comment  20E3
label    20E9 Update_Lazer_Shots
;        20F0
label    20F0 Update_Lazer_Shots_1
const    20F3
lcomment 20F3 ZP_Temp_2_Lo
lcomment 20F4
word     20F4
const    20F6
lcomment 20F6 End of Parameters
comment  20F7
comment  20F7 Loop 4 times through other_ram, 8 bytes at a time, if any are 0, branch to 2110
label    20FB Update_Lazer_Shots_Loop
label    2110 Update_Lazer_Shot
label    212f Update_Lazer_Shot1
;        2145
label    2145 BACK_2145
;        216B
label    216B Lazer_Color_Table
lcomment 216B Green not used, messes up colors if it's used
break    216F
label    2173 Update_Lazer_Shot_1
label    217E Update_Lazer_Shot_2
label    2187 Update_Lazer_Shot_1_1
label    218D Update_Lazer_Shot_1_2
;        219A
label    219A Fire_Pressed
label    219A Fire_Pressed_1
label    21DC SKIP_21DC
label    21F1 SKIP_21F1
label    21FC SKIP_21FC
label    2202 SKIP_2202
;        2206
word     2206
word     2209
word     220C
break    220F
label    2211 Fire_Pressed_2
label    2229 SR_2229
label    2248 SR_2229_1
label    2257 SR_2257
label    2263 SR_2257_1
label    2285 CLC_ADC_08
label    228B Move_ZP17_15_to_ZP16_14
label    2298 SR_2298
label    22A1 SR_2298_1
label    22B4 SR_2298_1_1
label    22BA Reset_Level_Add_Extra_Life
comment  22BD
comment  22BD Player at level 4, add another life
;        22EA
word     22EA
;        22ED
label    22ED JMP23A1
break    22ED
;        22F9
word     22F9
;        22FF
label    22FF Init_Objects_1_To_3
label    2301 CBTSR1
label    230B Reset_Some_Objects
;        2315
word     2315
label    231A Reset_S_O_1
const    233B-235A
label    233B Inital_Object_Data
lcomment 233B AF = sprite at bottom of screen, could be rocket part?
break    233F
lcomment 233F 3F/5F = height of rocket parts at rest on platforms?
break    2343
lcomment 2343 50 = x coord of middle rocket part?
break    2347
break    234B
break    234F
label    2353 BTCTOR_1
break    2357
lcomment 2353 Initial position etc of Jetman?
label    235D BACK_235D
lcomment 2366 More time between players when 2 player game
lcomment 2369 One player game?
lcomment 236B Yes, jump
lcomment 236D Set countdown for 2 player game
lcomment 236F Store countdown
label    236F LDA_7F_Return
;        2373
label    2373 P1_LIVES_TO_UDG_RAM
const    2376
lcomment 2376 ZP Offset for 1st address
lcomment 2377 1st Address
word     2377
lcomment 2379 End of Parameters
;        2382
label    2382 P2_Lives_To_UDG_RAM
const    2385
lcomment 2385 ZP Offset for 1st address
lcomment 2386 1st Address
word     2386
lcomment 2388 End of Parameters
comment  2396
comment  2396 Display Jetman Icon
lcomment 2399 ZP_Temp_2_Lo
;        239A
word     239A
lcomment 239D 8 bytes of UDG data to copy
label    23A2 _Display_2_Spaces???_
lcomment 23A8 $60 = Space character
label    23A8 Display_2_Spaces???
lcomment 23AF $60 = Space character
label    23B6 Load_Num_Lives
label    23BA Load_Num_Lives_P1
label    23BD Load_Num_Lives_P2
label    23C0 Load_Num_Lives_Inverse
;        23C7
label    23C7 Jetman_Icon
const    23C7-23CE
break    23C7-23CE
bin      23C7-23CE
label    23CF LDA_7F
lcomment 23CE
lcomment 23CE ...##...
lcomment 23CE ..#..#..
lcomment 23CE ..####..
lcomment 23CE .######.
lcomment 23CE .#.##.#.
lcomment 23CE ..####..
lcomment 23CE ..####..
lcomment 23CE .##..##.
comment  23Cf
;        23D4
comment  23D4
label    23D4 Setup_Player_Lives
label    23D6 BACK_23D6
comment  23DA
comment  23E7
label    23F4 SKIP_23F4
label    23F5 Swap_Player_And_Objects
label    23F7 Swap_Player
comment  2404
label    2406 Swap_Object
;        2416
label    2416 Reset_Color_Pixels_Scores
lcomment 241C Puts 000000  000000  00 at top of screen
;        2425
label    2425 Display_1UP_HI_2UP_Titles
comment  2425
comment  2425 Setup address to copy data from ($2450) into UDG array for 1UP HI 2UP
lcomment 2427 3 strings to display, 1UP, HI and 2UP
;        2429
label    2429 D1H2
;        2450
label    2450 STR_1UP
break    2457
label    2457 STR_HI
break    245E
label    245E STR_2UP
;        2465
comment  2465
label    2465 STR_1UP_HI_2UP
lcomment 2465 X Y
word     2467
const    2469
lcomment 2469 X Y
word     246B
lcomment 246D X Y
word     246F
;        2471
comment  2471
label    2471 P1_Score_To_UDG_RAM
lcomment 2474 ZP_UDG_RAM_X ZP_UDG_RAM_Y, but not in this case
lcomment 2475 UDG array absolute position to display score at
word     2475
lcomment 2477 ZP_Ptr_To_Str
lcomment 2478 Players score in ZP as BCD e.g. 12 34 56
word     2478
lcomment 247A ZP_Temp_1
const    247B
lcomment 247B 3 bytes of BCD data to display e.g. 12 34 56
word     247B
lcomment 247D End of Parameters
;        2481
label    2481 P2_Score_To_UDG_RAM
const    2484
lcomment 2484
lcomment 2485
word     2485
const    2487
lcomment 2487
lcomment 2488
word     2488
const    248A
lcomment 248A
lcomment 248B
word     248B
break    248D
lcomment 248D End of Parameters
;        2491
label    2491 Hi_Score_To_UDG_RAM
const    2494
lcomment 2494
lcomment 2495
word     2495
const    2497
lcomment 2497
lcomment 2498
word     2498
const    249A
lcomment 249A
lcomment 249B
word     249B
break    249D
lcomment 249D End of Parameters
;        24A1
label    24A1 Game_Sel_Flash_Period
label    24A4 GSFP1
lcomment 24A5 Test settings bit 1, if not set, skip counter logic
lcomment 24A9 Counter for flash period
lcomment 24AB remove the lsrs and flashes get faster
;        24B2
label    24B2 GSFP2
label    24B9 Display_Game_Select
;        24CA
comment  24CA
;        24CE
break    24CE
lcomment 24CE X Y
lcomment 24CD ZP_UDG_RAM_X
const    24CF
break    24D0
word     24D1
comment  24D7
lcomment 24DA ZP_UDG_RAM_X
break    24DB
lcomment 24DB X Y
break    24DD
word     24DE
comment  24E4
lcomment 24E7 ZP_Ptr_To_Str
lcomment 24E8 String address
word     24E8
comment  24EB
;        24EF
label    24EF DGS1
comment  2500
;        251F
const    251F-2523
label    251F Fn_Key_SP_Row_Offsets
;        2524
comment  2524
label    2524 STRING_COPYRIGHT_1983_ACG
lcomment 2539 Top bit=1 indicates end of string
lcomment 2539 `= Space, qyxs = 1983, n=.
label    253A STR_JETPAC_GAME_SELECT
label    2550 STR_F1_1_PLAYER_GAME
label    2562 STR_F3_2_PLAYER_GAME
label    2574 STR_F5_KEYBOARD
label    2581 STR_F7_JOYSTICK
label    258E STR_SP_START_GAME
;        259D
comment  259D
label    259D Read_ZP_Parameters
lcomment 259D
lcomment 259D Parameters for this routine are assembled into ROM after the
lcomment 259D call to this routine and accessed via the return address
lcomment 259D stored on the stack.
lcomment 259E Stash return address
comment  25A3
;        25A5
label    25A5 RZPP1
lcomment 25A5 Load next parameter value, ZP address for next param else $FF
lcomment 25A7 Value $FF?
lcomment 25A9 If No, Skip
comment  25AE
;        25B5
label    25B5 Read_ZP_Paramenter
lcomment 25B5 Stash to X number before string characters (string len?)
comment  25B6
lcomment 25B6 Address starts at end of previous opcode operand, so inc it
lcomment 25B9 Y starts at 1
lcomment 25BB Store the parameter value to requried ZP address lo-byte
comment  25BD
lcomment 25BD Same again for hi-byte
comment  25C4
lcomment 25C4 Move to next parameter
lcomment 25C7 Go back and read the next parameter
;        25CA
label    25CA Inc_Param_Addr
lcomment 25CA Inc address at $40, inc lo-byte, then hi-byte if lo-byte=0
label    25D0 IPA1
;        25D1
label    25D1 Game_Start
;        25E0
comment  25E0
comment  25E0 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
used     25E0 Hardware_Interrupt_Handler
;        25F4
label    25F4 SKIP_25F4
comment  25FA
label    25FA Game_Start_
lcomment 25FE $03B0 = "Object_0"
label    2607 Main_Loop
lcomment 2609 Load Object Type into A from obj table 0380 upwards
lcomment 260B Mulitply by two as 2 bytes in an address
lcomment 260C Object Type becomes offset into Subroutine List
lcomment 260D Load SR List offset into SR Vec Lo/Hi...
lcomment 2617 ...and jmp to it
label    261A Triggers_Every_Frame
lcomment 261C Test Object Type value
lcomment 261E If <>00, skip
lcomment 2622 Is Object address $B0? i.e. Object_0
lcomment 2624 If not, skip
comment  262A
comment  262A Delay loop $100 x $02 x (2+3) = $A00 = 2,560 cycles @ 1.108MHz PAL = 0.02 Seconds (Needs Check)
label    262A Delay_Loop_Moving
comment  2630
comment  2630 Increment Object Pointer to next Obj i.e. by adding 8
label    2630 SKIP_2630
comment  2637
lcomment 2637 H/W interrupt happened????
lcomment 2639 If yes, jump
comment  263B
lcomment 263B Is Object address $B0? i.e. Object_0
label    2652 SKIP_2652
label    2655 SKIP_2655
;        265E
comment  265E Setup Timer 1
label    265E Set_Jetman_Movement_Speed
label    2669 SEI_Load_Jetman_Data_To_Obj_Ptr
lcomment 2669 Set Disable Interrupts flag
;        2679
const    2679
lcomment 2679 ZP Offset for 1st address
lcomment 267A 1st Address
word     267A
label    2680 Restore_Obj_Ptr_CLI
lcomment 2688 Clear Disable Interrupts flag
;        268C
label    268C Subroutine_List
word     268C-26AD
label    268D Subroutine_List+1
lcomment 2698 3 lines the JMP
lcomment 269A 2A6D and 2A5F almost the same
lcomment 269C 2A6D and 2A5F almost the same
;        26AE
comment  26AE
label    26AE Init_Object_?
label    26B0 CCTOR_1
label    26C5 C0_00_00_00_00_00_
00_00
label    26CD Jmp_To_SRList2_SR
label    26D1 JTSRLSR_1
label    26E4 Jmp_To_SRList2_SR_
label    26F2 Copy_ZP_Val_to_ZP1_Val
label    26FE Object_Picked_Up
label    271C Gem_Fuel_Picked_Up
label    2727 Lazer_Shot_Active
label    2735 Rocket_Flight_Active
;        2743
label    2743 Subroutine_List2
word     2743-274E
label    2744 Subroutine_List2+1
label    274F Collision
;        275B
comment  275B Erase $100 bytes zero page
label    275B Erase_ZP
lcomment 275B Erase $100 bytes zero page
label    275E Erase_ZP_1
;        2764
label    2764 Reset_Other_RAM_0380_03ff
label    2768 BACK_2768
;        276F
label    276F Erase_Hi_Score_Settings_Etc
lcomment 276F Erase $30 bytes at end of UDGs $1fd0-$2000
label    2773 Erase_1
;        277A
label    277A Check_New_Hi_Score
const    277D
lcomment 277D ZP_00
lcomment 277E Addr of High Score value
word     277E
const    2780
lcomment 2780 ZP_08
lcomment 2781 Addr of P1 High Score value
word     2781
lcomment 2784 Check Player 1 first
lcomment 2787  then follow through for Player 2
const    278A
lcomment 278A ZP_08
lcomment 278B Addr of P2 High Score value
word     278B
comment  278E
comment  278E Compare Hi Score BCD bytes
label    278E Test_New_Hi_Score
label    2790 Compare_BCD_Byte
lcomment 2796 Branch if SCORE_HI < Player Score
lcomment 2798 SCORE_HI >= Player Score, so return
label    2799 Move_To_Next_BCD_Byte
lcomment 279B All BCD bytes checked?
lcomment 279D No, check the next BCD byte
label    27A0 Copy_Player_To_Hi_Score
lcomment 27A0 3 BCD bytes, 02, 01, 00
label    27A2 CPTHS_1
lcomment 27A7 Return when all bytes copied
label    27AA Display_Rocket_Flame?
lcomment 27AE Object $0A = Flame (or maybe Rocket?)
label    27B3 Display_Rocket_Flame
comment  27B5
comment  27BD
lcomment 27C3 0019 must be height of rocket
comment  27C5
lcomment 27C5 Check rocket height
lcomment 27C7 Display Flame
lcomment 27C9 Don't display Flame
comment  27CB
label    27E1 SKIP_27E1
label    2819 Display_Flame
label    2812 No_Display_Flame
;        282E
comment  282E Using A to toggle, Load A and Y with Ship UDG address
label    282E Get_Flame_UDG_Addr
;        283A
const    283A-283d
label    283A Ptr_Rocket_Flame_Lo
lcomment 283A Addr of rocket flame UDG
label    283B Ptr_Rocket_Flame_Hi
label    283C Ptr_Final_Char_Lo
lcomment 283C Addr of final char UDG
label    283D Ptr_Final_Char_Hi
label    283E Fire_Pressed
;        286B
break    286B
const    286B
break    286D
label    2874 Jump_To_Subroutine_List3
;        2888
break    2888-2891
label    2888 Subroutine_List3
word     2888-2891
label    2889 Subroutine_List3+1
;        2892
label    2892 Set_Obj_Posn_05_To_07
label    2894 SR3_Store_To_Obj_Posn_05_06
label    289F Set_Obj_Posn_05_To_06
label    28A4 Set_Obj_Posn_05_To_03_Or_00
label    28B1 Set_Obj_Posn_05_To_03
label    28B6 Set_Obj_Posn_05_To_01_Or_Other
label    28C0 SKIP_28C0
label    28C9 Reset_Objects_1_To_8
label    28E7 Save_Obj_List_Ptr
label    28F0 Restore_Obj_List_Ptr
label    2934 Explosions_Plyr_Life_Lost?
;        2967
label    2967 Explosion_UDG_Ptr
word     2967-2974
break    2969
label    2968 Explosion_UDG_Ptr+1
break    296E
;        2987
label    2987 Game_Over
;        2997
label    2997 SKIP_2997
label    299D Sound_Channels_Off_ETC
label    29E7 Display_Game_Over
lcomment 29EA Game Over for P1 or P2?
label    29EE Display_Game_Over_P1
lcomment 29F1 ZP_Ptr_To_Str
lcomment 29F2 Pointer to "GAME OVER PLAYER 1"
word     29F2
lcomment 29F4 ZP_UDG_RAM_X ZP_UDG_RAM_Y
lcomment 29F5 X Y
word     29F5
;        29F8
label    29F8 Display_String_
;        29FB
comment  29FB
;        29FE
lcomment 29FE Into ZP addr 02 and 03...
const    29FF
lcomment 29FF ...load 00 and 00
word     29FF
lcomment 2A01 Into ZP addr 0A and 0B
const    2A02
lcomment 2A02 ...load F8 and 00
word     2A02
;        2A05
comment  2A05
comment  2A05 Delay loop $100^2 x ($100-$f8=$08) x (5+3) = $400,000 = 4,194,304 cycles @ 1.108MHz PAL = 3.785 Seconds
label    2A05 Delay_Loop_Game_Over
lcomment 2A05 5 cycles
lcomment 2A07 3 cycles when taken, 2 when not taken
;        2A12
label    2A12 Display_Game_Over_P2
lcomment 2A15 ZP_Ptr_To_Str
lcomment 2A16 Pointer to "GAME OVER PLAYER 2"
word     2A16
const    2A18
lcomment 2A18 ZP_UDG_RAM_X ZP_UDG_RAM_Y
lcomment 2A19 X Y
word     2A19
;        2A1F
label    2A1F STR_GAME_OVER_PLAYER_1
;        2A32
break    2A32
label    2A32 STR_GAME_OVER_PLAYER_2
;        2A4C
word     2A4C
label    2A5F Lev_Start_1st_Alien_onScr
label    2A6D Not_Triggered_2A6D
label    2ABC Not_Triggered_2ABC
label    2B7F _0400002001041818
label    2B87 _0E00002000000018
;        2B82
const    2B82
const    2B8A
;        2BCD
const    2BCD
lcomment 2BCD
const    2BCE
lcomment 2BCE
word     2BCE
;        2BDE
label    2BDE Get_Raster_Line_Band
;        2BE8
break    2BE8-2BF7
const    2BE8-2BF7
label    2BE8 Raster_Line_Table
label    2C6A Stops_All_After_Score_Flash
;        2CDB
const    2CDB-2CE2
label    2CDB _0025_0035_0045_0055
word     2CDB-2CE2
label    2CE3 Jetman_Looks???
label    2CF1 Jetman_Looks_1???
label    2D0F Jetman_Looks_1_1???
label    2CFF BACK_2CFF
break    2D54
const    2D59
;        2DBC
word     2DBC
;        2DDD
label    2DDD LOAD_ZP1E_ZP1F_W_UDG_RAM_X_00
label    2DFF Dec_Saved_Obj_List_Params_by_10
comment  2E17 Aliens keep moving also
label    2E17 Rocket_Goes_Up
lcomment 2E1A Object height offset
lcomment 2E1C Load object height i.e. Rocket
lcomment 2E1E Object hit top yet
lcomment 2E20 Yes, branch
lcomment 2E23 Calculate new height
lcomment 2E25 Store new height i.e one pixel up
label    2E34 Rocket_At_Top
comment  2E4E Flames stop a little way before bottom
label    2E4E Rocket_Goes_Down
comment  2E5B
comment  2E5B Move object Y position down 1 pixel, stopping at bottom i.e. $AF
lcomment 2E5B 03 = Height of object
lcomment 2E64 Hit bottom of playarea
comment  2E68
comment  2E68 Set current object type to a crash
label    2E74 Subroutine_2E74
;        2E93
word     2E93
label    2F8E Stops_All
;        2FE5
comment  2FE5 Using A as offset, Load A and Y with Ship UDG address
label    2FE5 Get_Ship_UDG_Addr
word     2FFD
label    3063 GameOverScoreStuff
lcomment 3065 If P2, setup P2 Score instead of P1 and then return after the param setup below
lcomment 306A ZP_Temp_2
lcomment 306B P1 Score in ZP
word     306B
comment  306E
label    306E Continue_Score_Process
lcomment 3070 Set Decimal Mode
lcomment 3086 Clear Decimal Mode
lcomment 3087 Decide if working with P1 or P2
label    308e P2_Score_To_UDG_RAM_
label    3091 Read_ZP_Params_P2_Score
lcomment 3094 ZP_Temp_2
lcomment 3095 P2 Score in ZP
word     3095
;        3143
lcomment 3143 Loads address to data from $31B6 i.e. 10 40 03 50 60 01 88 30 03
lcomment 316B $3E15 is the Mineral UDG address
;        31B6
comment  31B6 XY_Data_for_3143_Subroutine
const    31B6-31BE
word     31B6-31BD
label    3215 JMP_FLYING
label    3254 LDA_08
comment  3259 HOW DO YOU EVER GET HERE?
label    325E CLC_ADC_01
label    3264 CLC_ADC_B8
label    326A ADC_48
label    326F TXA_
label    3273 Read_Kbd_Jsk_And_Store
label    32C7 Flying?
label    32DE Flying_1?
label    32E0 Flying_2?
lcomment 32E8 AF=Bottom of screen
label    32F7 Flying_3?
label    32F9 Flying_4?
label    3309 SKIP_Flying_5?
label    330C Not_sure_330c
label    3318 LDA00
label    331D Bottom?
label    3321 Bottom_After?
label    334D Flash_Score_Then_Display_Scores
label    3367 JMP_to_Subroutine_261A
label    336A Read_Kbd_Jstk
label    33D4 Read_Joystick
label    33F7 Read_Keyboard_Joystick
lcomment 33FA Joystick selected?
label    345C SKIP_345CXXX
label    3465 Flash_Score
lcomment 3467 P1 or P2? Branch if P2
const    346C
lcomment 346C Store to ZP_UDG_RAM_X
lcomment 346D X Y position in pixels
const    346D
break    346F
label    3470 _Flash_Score_
lcomment 3479 Number of 8-bit wide characters to reverse
label    347B Invert_UDG_Columns
lcomment 347B Number of pixel lines to reverse
label    347D Invert_UDG_Rows
lcomment 347D Get current byte of character
lcomment 347F \ invert it
lcomment 3481 \ and write it back
lcomment 3484 All bytes inverted?
lcomment 3486 \ If yes, continue to next column
lcomment 3487 All columns inverted? If yes, finish
comment  3489
comment  3489 Move to next column by adding $B0 (#176) pixel to X postion
comment  3490
comment  3490 Move to top row by adding $B0 (#176) pixeln to X postion i.e. one column
lcomment 348C $B0 = height of screen in pixels i.e. move one column right
lcomment 3492 Add the carry from the previous $B0 addition for X
label    3499 Do_RTS
label    349A Load_UDG_RAM_for_P2
;        349D
lcomment 349D Store to ZP_UDG_RAM_X
const    349E
lcomment 349E X Y position in pixels
break    34A0
;        34A4
comment  34A4
comment  34A4 ----------------------------------------------------------
comment  34A4 Display_BCD_Bytes
comment  34A4 ----------------------------------------------------------
comment  34A4 FUNCTION  : Display
comment  34A4 \            Scores
comment  34A4 CALLED BY :
comment  34A4 CALLS     :
comment  34A4 ARGUMENTS : ZP_UDG_RAM_X ZP_UDG_RAM_Y = UDG array absolute position to display score at
comment  34A4 \            ZP_Ptr_To_Str             = Players score in ZP as BCD e.g. 12 34 56
comment  34A4 \            ZP_Temp_1                 = BCD byte counter i.e. number of bytes to display
comment  34A4 ----------------------------------------------------------
label    34A4 Display_BCD_Bytes
lcomment 34A4 Pointer to raw 12 34 56 in ZP
lcomment 34A6 Load first score byte i.e. 12
lcomment 34A8 Divide by $10
lcomment 34AB 12 has become 01
lcomment 34AD Add $70, $40 gets subtracted later on
lcomment 34AF and resultant $31st char in Char ROM is "1"
;        34B4
comment  34B4
comment  34B4 Display 2nd score character
lcomment 34B6 Load first score byte again i.e. 12
lcomment 34B8 Mask top 4 bits, 12 becomes 02
;        34C1
comment  34C1
comment  34C1 Increment pointer to next score byte
lcomment 34C5 Looks like a bug, should be incrementing ZP_Ptr_To_Str_Hi
label    34C7 SKIP_34C7
lcomment 34C7 Decrement number of bytes to display counter
lcomment 34C9 If <> 0 yet, process another byte
;        34CC
comment  34CC
comment  34CC ----------------------------------------------------------
comment  34CC NOT SURE WHAT THIS IS YET
comment  34CC ----------------------------------------------------------
comment  34CC FUNCTION  :
comment  34CC CALLED BY :
comment  34CC CALLS     :
comment  34CC ARGUMENTS :
comment  34CC ZP_PTR_TO_STR  = "COPYRIGHT`qyxs`An" or "JETPAC`GAME`SELEC"
comment  34CC ZP_ColorRAMPtr = "SP START GAME" or "JETPAC`GAME`SELEC"
comment  34CC ZP_UDG_RAM_X   = 08 A8 or 08 20
comment  34CC ZP_UDG_RAM_Y   = 08 A8 or 08 20
comment  34CC ZP_Addr_From   = 70 80 or 28 80
comment  34CC ----------------------------------------------------------
label    34CC Display_String
;        34D2
label    34D2
lcomment 34D2 Y=string character pointer
lcomment 34D4 Get character to display
;        34D6
label    34D6 DSTR1
lcomment 34D6 Stash character to X
lcomment 34D7 Inc character pointer
lcomment 34DA Test if character top bit is set = string end
lcomment 34DB Display character then exit
lcomment 34DD Display character
;        34E3
comment  34E3
label    34E3 Display_Character
;        34E9
comment  34E9
comment  34F0
;        34F7
label    34F7 Setup_Color_RAM_Ptr
lcomment 34F7 Get Addr_To lo-byte and divide by 8
lcomment 34F9 and store to Color RAM Ptr lo-byte.
lcomment 34FA ZP_Addr_To is used to work out the column
;        34FE
comment  34FE
lcomment 34FE Get Addr_To hi-byte, divide by $10
lcomment 3500 and use as index into Color RAM
lcomment 3501 Row Offsets i.e. 9600, 9617, 962e etc.
lcomment 3502 Divided by #16 because 16 y-pixels per
lcomment 3503 Color RAM tile.
comment  350D
lcomment 350D Store hi-byte of Color RAM
lcomment 350F to pointer hi-byte.
;        3512
const    3512-351C
label    3512 Color_RAM_Row_Offsets
;        351D
comment  351D
label    351D Setup_UDG_RAM_XY
lcomment 351D Addr_To = 18 68, as example
lcomment 351F Addr_To = 18 xx, 68 stashed to Y
comment  3520
lcomment 3520 Get Addr_To lo-byte, divide by 8, example = $18/8=3
lcomment 3526 Load Column offset (4th item = $21)
lcomment 3529 Store back to Addr_To lo-byte, Addr_To = 21 xx
;        352B
lcomment 352B Reset Addr_To hi-byte to 00
lcomment 352D Addr_To = 21 xx
;        352F
comment  352F
lcomment 352F Rotate left Addr_To by 4 bits
;        3531
label    3531 SURP1
lcomment 3536 Addr_To = 1x x2
;        3538
comment  3538
lcomment 3538 Get stashed Y = 68 to A
lcomment 353C Addr_To = 78 x2
lcomment 3542 Addr_To = 78 12 = "F7 JOYSTICK" start position
;        3545
const    3545-3557
label    3545 UDG_RAM_Column_Offsets
lcomment 3545 Bytes are middle two numbers in addr e.g. 10b0, 1160 etc
;        355C
comment  355C
label    355C RESET_COLOR_RAM
;        355F
const    355F
lcomment 355F ZP Offset for 1st address
lcomment 3560 1st Address
word     3560
;        3562
const    3562
lcomment 3562 ZP Offset for 2nd address
lcomment 3563 2nd address
word     3563
;        3565
const    3565
lcomment 3565 ZP Offset for 3rd address
lcomment 3566 3rd address
word     3566
;        3568
break    3568
lcomment 3568 End of Parameters
;        356C
label    356C ERASE_UDG_RAM_1000_1fff
const    356F
lcomment 356F ZP Offset for 1st address
const    3570
lcomment 3570 1st Address
word     3570
;        3572
const    3572
lcomment 3572 ZP Offset for 2nd address
lcomment 3573 2nd address
word     3573
;        3575
const    3575
lcomment 3575 ZP Offset for 3rd address
lcomment 3576 3rd address
word     3576
;        3578
break    3578
lcomment 3578 End of Parameters
;        3579
comment  3579
label    3579 ERASE_RAM
label    357B ERASE_RAM_1
lcomment 357B
lcomment 357B Fills memory from e.g. 9600-96FC (address at zero page $05) with $01's
lcomment 357B This is color RAM for 3.5k but unused for 8k+!?
lcomment 357B ALSO CONTIUNES TO BLANK THE SCREEN, COMPLETING BOTTOM HALF
lcomment 357B FILLS SCREEN WITH A RUG
lcomment 357B FILLS 1200-1FFF i.e. stanDard RAM
lcomment 357B This may be a generic memory move operation, as it also is used ot fill screen-ram at $1000
lcomment 357B 9600  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357B 9610  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357B 9620  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357B 9630  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357B 9640  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357B 9650  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357B 9660  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357B 9670  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357B 9680  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357B 9690  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357B 96A0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357B 96B0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357B 96C0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357B 96D0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357B 96E0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357B 96F0  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00   ................
lcomment 357B 9700  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
label    3584 ERASECR2
;        3595
comment  3595
comment  3595 ----------------------------------------------------------
comment  3595 Copy Character ROM Character to User-Defined Graphics Memory
comment  3595 ----------------------------------------------------------
comment  3595 FUNCTION  : Copy an 8 byte Character ROM character to the
comment  3595 \            Used-Defined Graphics RAM e.g. to display a
comment  3595 \            text string or score.
comment  3595 CALLED BY :
comment  3595 CALLS     : Nothing
comment  3595 ARGUMENTS : ZP_Temp_2_Lo = Loaded with character to copy e.g. $71 for "1"
comment  3595 \            ??? BROKEN COMMENTS Addr_To is already setup, e.g. $1268 in UDG memory "F5 Keyboard".
comment  3595 \            ??? BROKEN COMMENTS Addr_To gets updated as part of this routine.
comment  3595 ----------------------------------------------------------
label    3595 Copy_Char_To_UDG_RAM
lcomment 3595 Addr_From = 71 xx as example
lcomment 3597 Clear address hi-byte
lcomment 3599 Addr_From = 71 00
lcomment 359E Addr_From = 31 00, $31st Character ROM character is "1"
;        35A0
comment  35A0
comment  35A0 Multiply Addr_From by 8, as 8 bytes per UDG RAM character definition
label    35A2 CCTUR1
;        35A5
lcomment 35A5 Addr_From = 31 00 > 62 00 > c4 00 > 88 01 i.e. $0188
lcomment 35A7 Left-shifted 3 times? i.e. multiplied by 8
lcomment 35A8 If no, loop back
;        35AA
comment  35AA
comment  35AA Add $8000 Character ROM offset to address
lcomment 35AE Addr_From = 88 81 i.e. $8188 is Character ROM character "1"
;        35B0
comment  35B0
comment  35B0 Copy 8 bytes to form a complete character
lcomment 35B2 Test the Invert flag
lcomment 35B4 If yes, copy bytes with inversion instead
label    35B6 CCTUR2
lcomment 35B6 Copy bytes from given address with Y offset
lcomment 35B8 Copy bytes to given address with Y offset
lcomment 35BA Decrement number of lines counter
lcomment 35BB All lines copied? If no, loop back.
;        35BD
comment  35BD
comment  35BD Move the next character address to the next column
label    35BD CCTUR_NEXT
;        35C0
lcomment 35C0 #B0=176=number of vertical pixels i.e. move to next char right
lcomment 35C6 Increment address hi-byte if previous addition overflowed
;        35CB
comment  35CB
comment  35CB Copy 8 inverted bytes to form a complete character
label    35CB CCTUR_INV
lcomment 35CB Copy bytes from given address with Y offset
lcomment 35CD Invert the byte (used to make the byte flash)
lcomment 35CF Move bytes to given address with Y offset
lcomment 35D1 Decrement number of lines counter
lcomment 35D2 All lines copied? If no, loop back.
lcomment 35D4 If yes, routine ends
;        35D7
label    35D7 Save_Obj_List_Params
;        35E2
comment  35E2
;        35E9
label    35E9 Save_Obj_List_Params2
comment  35F4
comment  35FA
;        End
; End of file contains graphics data
;unused  3861-3fff ; TEMP STOP THE OUTPUT OF THE GRAPHICS
label    385F UDG_Lookup
label    3860 UDG_Lookup+1
break    385F-3FFF ; Output one byte per line
word     385F-3896
binary   3897-3C86
byte     3C87-3C88
const    3C87-3C88
word     3C89-3CB0
binary   3CB1-3FFF
;        38CA
label    38CA Jetman_Fly_Right_1
label    38FD Jetman_Walk_Right_1
label    3930 Jetman_Walk_Right_2
label    397B Jetman_Walk_Right_3
label    39C6 Jetman_Walk_Right_4
label    39F9 Jetman_Walk_Left_1
label    3A2C Jetman_Walk_Left_2
label    3A77 Jetman_Walk_Left_3
label    3AC2 Jetman_Walk_Left_4
label    3AF5 Jetman_Fly_Left_1
label    3B40 Jetman_Fly_Left_2
label    3B8B Jetman_Fly_Left_3
label    3BBE Jetman_Fly_Right_2
label    3BF1 Jetman_Fly_Right_3
label    3C3C Jetman_Fly_Right_4
lcomment 3C87 $3CD4 = Ship_1_Bott
label    3C87 UDG_Sprite_Lookup_Lo
label    3C88 UDG_Sprite_Lookup_Hi
label    3E46 Alien_Ship_1
label    3E61 Alien_Ship_2
label    3E78 Alien_Fuzz_1
label    3E99 Alien_Fuzz_2
label    3EB8 Alien_Bubble_1
label    3EEB Alien_Bubble_2
label    3F0E Alien_Cross_1
label    3F41 Alien_Cross_2
label    3CD4 Ship_1_Bott
label    3CF7 Ship_1_Mid
label    3D1A Ship_1_Top
label    3D3D Ship_2_Bott
label    3D60 Ship_2_Mid
label    3D83 Ship_2_Top
label    3D9C Fuel
label    3DAF Gold_Bar
label    3DCA Diamond
label    3DE3 Plutonium
label    3E00 Isotope
label    3E15 Mineral
label    3F74 Explosion_1
label    3F9B Explosion_2
label    3FB2 Explosion_3
