*** GENERAL COMMAND LINE OPTIONS ***
* Options begin,end,offset,interleave,bus always define settings for the following file
option dasm 6502            * Select disassembler type
option out jetpac.a65       * Select output filename of dissasembly
option offset 2000          * Select start address of supplied binary
file   jetpac_2000-3fff.bin * Instructs dasmfw to load the given file at the given address

*** OUTPUT FORMATTING OPTIONS ***
*option addr off     * Show address field output for clean assembler source files
*option hex on       * Show hex dump output
option asc off       * Show output of the ASCII equivalent to code/data
*option cref on      * Show cross-referece table
*option unused on    * Show unused labels
*option labellen 12  * Def=8  Reserve spaces for code labels.
option eqlbllen 18   * Def=8  Reserve spaces for EQU labels.
option copndlen 20   * Def=24 Reserve spaces for operand part of disassembled instruction with line comment
option uopndlen 52   * Def=52 Reserve spaces for operand part of disassembled instruction without line comment
option dbcount 3     * Def=5  Reserve spaces for hex/ascii dump bytes if hex or asc options enabled.

*** DISASSEMBLER OPTIONS ***
*option pbase 16     * Default parsing base, default is 16
option defdisp hex  * Default display base, default is hex
*option cchar //     * Set end of line comment character
*option cchar ;      * Set end of line comment character
option upmnemo off   * Upper case mnemonics in output file

*** DISASSEMBLER SPECIFIC OPTIONS ***
*option conv on       * Convenience mnemonics
*option forceaddr off * To handle forced direct / extended addressing

******************************************************************************
*If you think about it, there are various kinds of mutually exclusive options
*for a memory cell. These are:
*type (unused / code / data / rmb)
*size (default char / word; dasmfw also has dword for processors that support 4-byte entities)
*formatting (bin / char / dec / hex)
*semantics (const)
******************************************************************************

******************************************************************************
* If an address is used in an instruction that clearly indicates it's referencing
* data (LDA, as a simple example) and there's no label in place for that address,
* it uses a "M" prefix for generated labels; if the referenced address is clearly
* code (JMP, for example), it uses a "Z" prefix.
******************************************************************************

*** INFO FILE INSTRUCTIONS ***
include nfo_memory_map.nfo        * Include VIC-20 memory map info
include nfo_separators.nfo        * Include JMP/JSR separator lines
include nfo_code_data.nfo         * Undefend Labels

*insert \ SETLI 128               * a09 Assembler. Sets the line length for listings; nnn is the number of columns that can be printed in a line (40-2000).
*insert \ processor 6502          * For DASM Assembler? Can't remember...

insert ; ----------------------------------------------------------
insert ;  This is the reverse-engineered source code for the
insert ;  game 'JETPAC' written by Ultimate Play The Game.
insert ; ----------------------------------------------------------

; Workaround for as65 interpreting a '\' as escaping the next charecter
const 3457
const 3516

; Zero-Page variables
label      04 ZP_Addr_To
label      05 ZP_Addr_To+1
label      06 ZP_Addr_From
label      07 ZP_Addr_From+1
label      0c ZP_Color_RAM_Ptr
label      0d ZP_Color_RAM_Ptr+1
label      13 KEYBOARD_DATA
label      40 ZP_ADDR
label      41 ZP_ADDR+1
label      51 Score_P1 ; 3 bytes (Hi Score is stored where?)
label      54 Score_P2 ; 3 bytes
label      57 ZP_INVERT ; Used to flash game options & 1UP+score at player start
label      58 ZP_COUNTER
label      5a Num_Lives

label    1008 UDG_P1_SCORE
label    1420 UDG_P1_LIVES
label    1588 UDG_HI_SCORE
label    19a0 UDG_P2_LIVES
label    1b08 UDG_P2_SCORE

label    1fd0 UDG_END
label    1fd3 GAME_SETTINGS

; Start of disassembly instructions
word     2000-2003
const    2004-201b
break    2008
break    200c
break    2010

label    2014 BITM_01
label    2015 BITM_02
label    2016 BITM_04
label    2017 BITM_08
label    2018 BITM_10
label    2019 BITM_20
label    201a BITM_40
label    201b BITM_80

break    2019-2020
label    2004 VIC_Init_Tab
lcomment 2004 Initial value table for VIC setup 16 bytes
lcomment 201c NMI Interrupt Vector points here

comment  201d
comment  201d  ----------------------------------------------------------
comment  201d  Starts here
comment  201d  ----------------------------------------------------------

lcomment 201E Reset stack pointer
lcomment 2021 Clear Decimal flag
lcomment 2022 Setup NMI Interrupt Vector
comment  2056
lcomment 2056 Reset the VIC 16 registers
label    2058 Start_1
comment  2061
lcomment 2061
lcomment 2061 Store ascending numbers step #11 at a time into #23 bytes from $200 as below
lcomment 2061 then do it #10 more times, but starting at 1 higher each time
lcomment 2061 THIS BLANKS A SECTION OF THE SCREEN ONE PIXEL LINE AT A TIME
lcomment 2061 0217  01 0C 17 22 2D 38 43 4E 59 64 6F 7A 85 90 9B A6 B1 BC C7 D2 DD E8 F3   ..."-8CNYdoz...¦±¼ÇÒÝèó
lcomment 2061 022E  02 0D 18 23 2E 39 44 4F 5A 65 70 7B 86 91 9C A7 B2 BD C8 D3 DE E9 F4   ...#.9DOZep{...§²½ÈÓÞéô
lcomment 2061 0245  03 0E 19 24 2F 3A 45 50 5B 66 71 7C 87 92 9D A8 B3 BE C9 D4 DF EA F5   ...$/:EP[fq|...¨³¾ÉÔßêõ
lcomment 2061 025C  04 0F 1A 25 30 3B 46 51 5C 67 72 7D 88 93 9E A9 B4 BF CA D5 E0 EB F6   ...%0;FQ\gr}...©´¿ÊÕàëö
lcomment 2061 0273  05 10 1B 26 31 3C 47 52 5D 68 73 7E 89 94 9F AA B5 C0 CB D6 E1 EC F7   ...&1<GR]hs~...ªµÀËÖáì÷
lcomment 2061 028A  06 11 1C 27 32 3D 48 53 5E 69 74 7F 8A 95 A0 AB B6 C1 CC D7 E2 ED F8   ...'2=HS^it... «¶ÁÌ×âíø
lcomment 2061 02A1  07 12 1D 28 33 3E 49 54 5F 6A 75 80 8B 96 A1 AC B7 C2 CD D8 E3 EE F9   ...(3>IT_ju...¡¬·ÂÍØãîù
lcomment 2061 02B8  08 13 1E 29 34 3F 4A 55 60 6B 76 81 8C 97 A2 AD B8 C3 CE D9 E4 EF FA   ...)4?JU`kv...¢-¸ÃÎÙäïú
lcomment 2061 02CF  09 14 1F 2A 35 40 4B 56 61 6C 77 82 8D 98 A3 AE B9 C4 CF DA E5 F0 FB    ..*5@KValw...£®¹ÄÏÚåðû
lcomment 2061 02E6  0A 15 20 2B 36 41 4C 57 62 6D 78 83 8E 99 A4 AF BA C5 D0 DB E6 F1 FC   .. +6ALWbmx...¤¯ºÅÐÛæñü
lcomment 2061 02FD  00 00 00 3A C4 83 C4 7C C5 1A C7 E4 C7 86 CE 00 00 00 00 00 00 00 00   ...:Ä.Ä|Å.ÇäÇ.Î........

label    2064 Start_2
label    2067 Start_3
comment  2071
comment  2079
comment  2079
comment  207C
comment  2085


label    2080 BACK_2080
comment  208f
label    208F ATTRACT_MODE
label    20b2 SKIP_20b2
label    20bc SKIP_20bc
label    20c6 SKIP_20c6
label    20d0 SKIP_20d0

comment  20E3

label    20F0 ???_TO_UDG_RAM
const    20F3
lcomment 20F3 ZP Offset for 1st address
lcomment 20F4 1st Address
word     20F4
const    20F6
lcomment 20F6 FF is loop terminator

label    2145 BACK_2145

label    216b _12346737
label    21dc SKIP_21DC
label    21F1 SKIP_21F1

word     2206
word     2209
word     220c
break    220f

;const    22ea
word     22ea

break    22ed

;const    22f9

word     239a

word     22f9


word     2315
const     233b-235a

label    2373 P1_LIVES_TO_UDG_RAM
const    2376
lcomment 2376 ZP Offset for 1st address
lcomment 2377 1st Address
word     2377
lcomment 2379 FF is loop terminator

label    2382 P2_LIVES__TO_UDG_RAM
const    2385
lcomment 2385 ZP Offset for 1st address
lcomment 2386 1st Address
word     2386
lcomment 2388 FF is loop terminator

label    23c7 SOME_DATA

label    23D6 BACK_23D6
label    23F4 SKIP_23F4
label    23F7 BACK_23F7
label    2406 BACK_2406

label    2416 RESET_COLOR_PIXELS_SCORES
lcomment 241c Puts 000000  000000  00 at top of screen

comment  2425
comment  2425 Setup address to copy data from ($2450) into UDG array for 1UP HI 2UP



label    2429 BACK_2429

label    2450 TEXT_STRINGS_1UP
break    245e
label    2457 TEXT_STRINGS_HI
break    2457
label    245e TEXT_STRINGS_2UP
break    245e




label    2465 TEXT_STRINGS_1UP_HI_2UP
word     2465-246f
break    246b
break    246d

label    2471 P1_SCORE_TO_UDG_RAM
const    2474
lcomment 2474 ZP Offset for 1st address
lcomment 2475 1st Address
word     2475
const    2477
lcomment 2477 ZP Offset for 2nd address
lcomment 2478 2nd address
word     2478
const    247a
lcomment 247a ZP Offset for 2nd address
lcomment 247b 2nd address
word     247b
lcomment 247d FF is loop terminator

label    2481 P2_SCORE_TO_UDG_RAM
const    2484
lcomment 2484 ZP Offset for 1st address
lcomment 2485 1st Address
word     2485
const    2487
lcomment 2487 ZP Offset for 2nd address
lcomment 2488 2nd address
word     2488
const    248a
lcomment 248a ZP Offset for 2nd address
lcomment 248b 2nd address
word     248b
break    248d
lcomment 248d FF is loop terminator

label    2491 HI_SCORE_TO_UDG_RAM?
const    2494
lcomment 2494 ZP Offset for 1st address
lcomment 2495 1st address
word     2495
const    2497
lcomment 2497 ZP Offset for 2nd address
lcomment 2498 2nd address
word     2498
const    249a
lcomment 249a ZP Offset for 3rd address
lcomment 249b 3rd address
word     249b
break    249d
lcomment 249d FF is loop terminator

label    24B2 SKIP_24B2

word     24ce
word     24D1
const    24db
word     24Db
word     24de
word     24e8


label    2524 STRING_COPYRIGHT_1983_ACG
label    253a STRING_JETPAC_GAME_SELECT
label    2550 STRING_F1_1_PLAYER_GAME
label    2562 STRING_F3_2_PLAYER_GAME
label    2574 STRING_F5_KEYBOARD
label    2581 STRING_F7_JOYSTICK
label    258E STRING_SP_START_GAME



word     24Db
word     24De

label    24EF BACK_24EF

comment  259d
label    259d AAAAA
lcomment 259d
lcomment 259d Takes stuff that was stashed on the stack previously and leaves
lcomment 259d as an address in $0040, in this case $355E
label    25A5 AAAAA1
lcomment 25A5 Load from 355e+1 value 02
lcomment 25A7 Value $FF?
lcomment 25A9 If No, Skip

label    25B5 GET_40Y_PUT_0X_2BYTES

label    25ca INC_ADDRESS_AT_40
lcomment 25ca Inc address at $40, inc lo-byte, then hi-byte if lo-byte=0
label    25d0 INCADDR40

label    262A BACK_262A
label    2630 BACK_2630
label    2652 SKIP_2652
label    2655 SKIP_2655

comment  265e Setup Timer 1
label    265e SET_TMR_1

const    2679
lcomment 2679 ZP Offset for 1st address
lcomment 267a 1st Address
word     267a

const    268e-26ad
word     268e-26ad

label    26b0 BACK_26b0

label    26c5 SCREEN_C0000000

label    26d1 BACK_26d1


comment  275b Erase $100 bytes zero page
label    275b ERASEZP
lcomment 275b Erase $100 bytes zero page
label    275e ERASEZ1

label    2768 BACK_2768

lcomment  276f Erase $30 bytes at end of UDGs $1fd0-$2000
label    276f ERASE_UDG_END
label    2773 ERASE1

const    277d
lcomment 277d ZP Offset for 1st address
lcomment 277e 1st Address
word     277e
const    2780
lcomment 2780 ZP Offset for 1st address
lcomment 2781 1st Address
word     2781
const    278a
lcomment 278a ZP Offset for 1st address
lcomment 278b 1st Address
word     278b

lcomment 2093 Set Port B all bits to input
lcomment 2098 Set Port A all bits to output
lcomment 209D Select keyboard column to read (F7/F5/F3/F1/CDown/CRight/Rtn/Del)
lcomment 20A0 Get game settings ($1fD3 = Just outside UDG RAM)
lcomment 20A3 Read keyboard column
lcomment 20A6 Store keyboard data
lcomment 20AA F1 pressed? (1 Player)
lcomment 20AC No, skip
lcomment 20B4 F3 pressed? (2 Player)
lcomment 20b6 No, skip
lcomment 20BE F5 pressed? (Keyboard)
lcomment 20c0 No, skip
lcomment 20c8 F7 pressed? (Joystick)
lcomment 20ca No, skip
lcomment 20d1 Store game settings ($1fD3 = Just outside UDG RAM)
lcomment 20d9 Select keyboard column to read (2/Q/CBM/Space/Stop/Ctrl/Left/1)
lcomment 20df Space Pressed?
lcomment 20e1 No, read keyboard again

label    2888 Vectors
label    2889 Vectors+1
word     2888-2891
break     2888-2891

label 2892 WWW
label 28a4 XXX
label 289F YYY
label 28b6 ZZZ


const    29f1
lcomment 29f1 ZP Offset for 1st address
lcomment 29f2 1st Address
word     29f2
const    29f4
lcomment 29f4 ZP Offset for 1st address?????
lcomment 29f5 1st Address?????
word     29f5

const    29fe
lcomment 29fe ZP Offset for 1st address
lcomment 29ff 1st Address
word     29ff
const    2a01
lcomment 2a01 ZP Offset for 1st address
lcomment 2a02 1st Address
word     2a02


lcomment  349D Data for AAAAA call above

const    34a1-34a3
break    34a1
word     349e
label    34a4 CCCC_34a4

lcomment 34be Jump to routine copy stuff from STD CHAR ROM TO UDG CHAR SET

lcomment 34CC YOU ARE HERE --- intermediate jsr, called from several places
lcomment 34CF Doesn't seem to do much
label    34D6 BACK_34D6
lcomment 34D8 Load A with content of $2450+y?
lcomment 34DB Strange pair of jumps to same place, branch&jsr
lcomment 34Dd Strange pair of jumps to same place, branch&jsr
lcomment 34e3 Run through, don't know what it's doing

comment  34e9
lcomment 34e9 Stash y via a
lcomment 34EB Moves a few bytes around
lcomment 34ef Restore y via a
comment  34f0

const    3512-351c

comment  351D
lcomment 351D Valid Target - traced but doesn't seem to do much

label    3531 BACK_3531

comment  355c
label    355c RESET_COLOR_RAM?

const    355f
lcomment 355f ZP Offset for 1st address
lcomment 3560 1st Address
word     3560

const    3562
lcomment 3562 ZP Offset for 2nd address
lcomment 3563 2nd address
word     3563

const    3565
lcomment 3565 ZP Offset for 3rd address
lcomment 3566 3rd address
word     3566

break    3568
lcomment 3568 FF is loop terminator


label    356c ERASE_UDG_RAM_1000_1fff
const    356f
lcomment 356f ZP Offset for 1st address
lcomment 3570 1st Address
word     3570

const    3572
lcomment 3572 ZP Offset for 2nd address
lcomment 3573 2nd address
word     3573

const    3575
lcomment 3575 ZP Offset for 3rd address
lcomment 3576 3rd address
word     3576

break    3578
lcomment 3578 FF is loop terminator

comment  3579
label    3579 ERASE_COLOR_RAM_9600
label    357b ERASECR1
lcomment 357b
lcomment 357b Fills memory from 9600-96fc (address at zero page $05) with $01's
lcomment 357b This is color RAM for 3.5k but unused for 8k+!?
lcomment 357b ALSO CONTIUNES TO BLANK THE SCREEN, COMPLETING BOTTOM HALF
lcomment 357b FILLS SCREEN WITH A RUG
lcomment 357b FILLS 1200-1fff i.e. stanard RAM
lcomment 357b This may be a generic memory move operation, as it also is used ot fill screen-ram at $1000
lcomment 357b 9600  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 9610  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 9620  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 9630  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 9640  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 9650  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 9660  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 9670  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 9680  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 9690  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 96A0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 96B0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 96C0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 96D0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 96E0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01   ................
lcomment 357b 96F0  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00   ................
lcomment 357b 9700  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
label    3584 ERASECR2

label    3595 MV_CHARS_TO_UDGRAM

comment  3595
comment  3595 ----------------------------------------------------------
comment  3595 Copy Character ROM Character to User-Defined Graphics Memory
comment  3595 ----------------------------------------------------------
comment  3595 FUNCTION  : Copy an 8 byte Character ROM character to the
comment  3595 \            Used-Defined Graphics RAM e.g. to display a
comment  3595 \            text string or score.
comment  3595 CALLED BY :
comment  3595 CALLS     : Nothing
comment  3595 ARGUMENTS : Addr_From is already setup, typically $60 or $70.
comment  3595 \            Addr_To is already setup, e.g. $1268 in UDG memory "F5 Keyboard".
comment  3595 \            Addr_To gets updated as part of this routine.
comment  3595 ----------------------------------------------------------
label    3595 COPY_CHAR_TO_UDG_RAM
lcomment 3595 Addr_From = 71 xx as example
lcomment 3597 Clear address hi-byte
lcomment 3599 Addr_From = 71 00
lcomment 359E Addr_From = 31 00, $31st Character ROM character is "1"

comment  35A0
comment  35A0 Multiply Addr_From by 8, as 8 bytes per character definition
label    35A2 CCTUR1

lcomment 35a5 Addr_From = 31 00 > 62 00 > c4 00 > 88 01 i.e. $0188
lcomment 35a7 Left-shifted 3 times? i.e. multiplied by 8
lcomment 35a8 If no, loop back

comment  35aa
comment  35aa Add $8000 Character ROM offset to address
lcomment 35ae Addr_From = 88 81 i.e. $8188 is Character ROM character "1"

comment  35B0
comment  35b0 Copy 8 bytes to form a complete character
lcomment 35b2 Test the Invert flag
lcomment 35b4 If yes, copy bytes with inversion instead
label    35B6 CCTUR2
lcomment 35B6 Copy bytes from given address with Y offset
lcomment 35b8 Copy bytes to given address with Y offset
lcomment 35ba Decrement number of lines counter
lcomment 35bb All lines copied? If no, loop back.

label    35bd CCTUR_NEXT
comment  35BD
comment  35BD Move the next character address to the next column

lcomment 35C0 #B0=176=number of vertical pixels i.e. move to next char right
lcomment 35C6 Increment address hi-byte if previous addition overflowed

label    35CB CCTUR_INV
comment  35CB Copy 8 inverted bytes to form a complete character
lcomment 35CB Copy bytes from given address with Y offset
lcomment 35cd Invert the byte (used to make the byte flash)
lcomment 35Cf Move bytes to given address with Y offset
lcomment 35d1 Decrement number of lines counter
lcomment 35d2 All lines copied? If no, loop back.
lcomment 35d4 If yes, routine ends


; End of file contains graphics data
unused   3861-3fff ; TEMP STOP THE OUTPUT OF THE GRAPHICS
break    385f-3fff ; Output one byte per line
binary   385f-3fff